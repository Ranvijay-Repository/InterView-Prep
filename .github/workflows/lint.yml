name: Lint and Validate

# Run only on pull requests to production branch
on:
  pull_request:
    branches:
      - production

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      - name: Configure Bundler
        run: |
          bundle config set --local frozen false
          bundle config set --local deployment false

      - name: Lint Jekyll files
        run: |
          # Check for common Jekyll issues
          echo "🔍 Checking for Liquid syntax errors..."
          find . -name "*.md" -not -path "./_site/*" -not -path "./.git/*" | while read file; do
            # Check for unescaped double curly braces that might cause Liquid errors
            if grep -n "{{[^%]" "$file" | grep -v "{% raw %}" | grep -v "{% endraw %}"; then
              echo "⚠️  Potential Liquid syntax issue in $file"
              echo "Consider wrapping code blocks with {% raw %} and {% endraw %}"
            fi
          done

      - name: Validate Markdown
        run: |
          # Install markdownlint if available
          if command -v markdownlint &> /dev/null; then
            markdownlint "**/*.md" --ignore node_modules --ignore _site
          else
            echo "📝 Markdown validation skipped (markdownlint not available)"
          fi

      - name: Check for broken internal links
        run: |
          echo "🔗 Checking for broken internal links..."
          # Simple check for common link issues
          find . -name "*.md" -not -path "./_site/*" -not -path "./.git/*" | while read file; do
            # Check for links to non-existent files
            grep -o '\[.*\]([^)]*)' "$file" | while read link; do
              if [[ $link =~ \[.*\]\(([^)]+)\) ]]; then
                target="${BASH_REMATCH[1]}"
                # Skip external links
                if [[ ! $target =~ ^https?:// ]]; then
                  # Remove anchor from target
                  clean_target="${target%#*}"
                  if [[ ! -f "$clean_target" && ! -d "$clean_target" ]]; then
                    echo "⚠️  Broken link in $file: $target"
                  fi
                fi
              fi
            done
          done

      - name: Validate Jekyll configuration
        run: |
          echo "⚙️  Validating Jekyll configuration..."
          bundle exec jekyll doctor || echo "Jekyll doctor found some issues (non-blocking)"

      - name: Test Jekyll build
        run: |
          echo "🏗️  Testing Jekyll build..."
          bundle exec jekyll build
          echo "✅ Jekyll build test passed"

      - name: Comment PR with lint results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🔍 **Lint Results**: All checks completed successfully!
              
              - ✅ Jekyll configuration validated
              - ✅ Markdown files checked
              - ✅ Internal links verified
              - ✅ Build test passed
              
              This PR is ready for review and merge to production.`
            });
