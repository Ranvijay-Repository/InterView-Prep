name: Deploy to GitHub Pages

# Only run on PR merges to production branch
on:
  push:
    branches:
      - production
  pull_request:
    branches:
      - production

# Workflow-level condition to prevent running on direct pushes to production
# Only run if it's a PR event OR if it's a push with "Merge pull request" in commit message

# Set permissions for GitHub Pages deployment
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Workflow-level check - exit early if this is a direct push to production
  check-deployment-eligibility:
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
    steps:
      - name: Check if deployment should proceed
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "✅ PR event detected - deployment check passed"
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/production" ]]; then
            if [[ "${{ github.event.head_commit.message }}" == *"Merge pull request"* ]]; then
              echo "✅ PR merge detected - deployment check passed"
              echo "should-deploy=true" >> $GITHUB_OUTPUT
            else
              echo "❌ Direct push to production detected - deployment blocked"
              echo "should-deploy=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ Invalid event or branch - deployment blocked"
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  # Build job (runs on PR merges and PR events)
  build:
    needs: check-deployment-eligibility
    if: needs.check-deployment-eligibility.outputs.should-deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for proper Jekyll processing

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      - name: Configure Bundler
        run: |
          bundle config set --local frozen false
          bundle config set --local deployment false

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Build with Jekyll
        run: |
          bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site

  # Deploy job (only runs on PR merges to production, not on direct pushes)
  deploy:
    needs: [check-deployment-eligibility, build]
    if: needs.check-deployment-eligibility.outputs.should-deploy == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/production' && contains(github.event.head_commit.message, 'Merge pull request')
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Verify PR merge
        run: |
          echo "🔍 Verifying this is a PR merge..."
          echo "Commit message: ${{ github.event.head_commit.message }}"
          if [[ "${{ github.event.head_commit.message }}" == *"Merge pull request"* ]]; then
            echo "✅ Confirmed: This is a PR merge commit"
          else
            echo "❌ Error: This is not a PR merge commit"
            echo "Deployment blocked - only PR merges are allowed"
            exit 1
          fi
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Test job (runs on PR to production)
  test:
    needs: check-deployment-eligibility
    if: needs.check-deployment-eligibility.outputs.should-deploy == 'true' && github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      - name: Configure Bundler
        run: |
          bundle config set --local frozen false
          bundle config set --local deployment false

      - name: Test Jekyll build
        run: |
          bundle exec jekyll build --baseurl "/${{ github.event.pull_request.number }}"
        env:
          JEKYLL_ENV: production

      - name: Check for broken links
        run: |
          # Install htmlproofer if not already available
          gem install html-proofer
          # Check for broken links (excluding external links for faster testing)
          htmlproofer ./_site --disable-external --allow-hash-href --empty-alt-ignore

      - name: Comment PR with build status
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Check if _site directory exists and has content
            const siteDir = './_site';
            const hasContent = fs.existsSync(siteDir) && fs.readdirSync(siteDir).length > 0;
            
            const status = hasContent ? '✅' : '❌';
            const message = hasContent 
              ? 'Jekyll build successful! Ready for deployment.' 
              : 'Jekyll build failed. Please check the logs.';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${status} **Build Status**: ${message}\n\nThis is a test build for PR #${{ github.event.pull_request.number }}. The actual deployment will happen when this PR is merged to production.`
            });
