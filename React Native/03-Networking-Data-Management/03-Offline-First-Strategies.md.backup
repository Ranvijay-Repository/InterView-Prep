# 📱 **Offline-First Strategies**

> **Master offline-first development patterns to create robust mobile applications that work seamlessly without internet connectivity**

<link rel="stylesheet" href="../../common-styles.css">

---

## 📚 **Table of Contents**

- [Introduction](#introduction)
- [Offline Detection](#offline-detection)
- [Data Synchronization](#data-synchronization)
- [Local Storage Strategies](#local-storage-strategies)
- [Queue Management](#queue-management)
- [Conflict Resolution](#conflict-resolution)
- [Common Patterns](#common-patterns)
- [Interview Questions](#interview-questions)
- [Best Practices](#best-practices)

---

## 🎯 **Introduction**

Offline-first development ensures your React Native app provides a great user experience even when network connectivity is poor or unavailable. This approach prioritizes local data and synchronizes when possible.

### **Offline-First Overview**

{% raw %}
```
┌─────────────────────────────────────┐
│        Offline-First System         │
│  ┌─────────────────────────────────┐│
│  │        Network Detection        ││
│  │  - Connection monitoring        ││
│  │  - Network state changes        ││
│  │  - Connectivity indicators      ││
│  └─────────────────────────────────┘│
│  ┌─────────────────────────────────┐│
│  │        Local Storage            ││
│  │  - AsyncStorage                 ││
│  │  - SQLite                       ││
│  │  - Realm                        ││
│  │  - MMKV                         ││
│  └─────────────────────────────────┘│
│  ┌─────────────────────────────────┐│
│  │        Sync Strategies          ││
│  │  - Background sync              ││
│  │  - Conflict resolution          ││
│  │  - Queue management             ││
│  │  - Optimistic updates           ││
│  └─────────────────────────────────┘│
└─────────────────────────────────────┘
```
{% endraw %}

---

## 📡 **Offline Detection**

### **Network State Monitoring**

<button onclick="copyCode(this)" class="copy-btn">📋 Copy</button>
{% raw %}
```javascript
import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, Alert } from 'react-native';
import NetInfo from '@react-native-community/netinfo';

const OfflineDetectionExample = () => {
  const [isConnected, setIsConnected] = useState(true);
  const [connectionType, setConnectionType] = useState('unknown');
  const [isInternetReachable, setIsInternetReachable] = useState(true);
  const [networkDetails, setNetworkDetails] = useState(null);
  
  useEffect(() => {
    // Subscribe to network state changes
    const unsubscribe = NetInfo.addEventListener(state => {
      console.log('Network state changed:', state);
      
      setIsConnected(state.isConnected);
      setConnectionType(state.type);
      setIsInternetReachable(state.isInternetReachable);
      setNetworkDetails(state.details);
    });
    
    // Get initial network state
    NetInfo.fetch().then(state => {
      setIsConnected(state.isConnected);
      setConnectionType(state.type);
      setIsInternetReachable(state.isInternetReachable);
      setNetworkDetails(state.details);
    });
    
    return () => {
      unsubscribe();
    };
  }, []);
  
  const getConnectionStatusColor = () => {
    if (isConnected && isInternetReachable) {
      return '#4CAF50'; // Green
    } else if (isConnected && !isInternetReachable) {
      return '#FF9800'; // Orange
    } else {
      return '#F44336'; // Red
    }
  };
  
  const getConnectionStatusText = () => {
    if (isConnected && isInternetReachable) {
      return 'Connected';
    } else if (isConnected && !isInternetReachable) {
      return 'Connected (No Internet)';
    } else {
      return 'Offline';
    }
  };
  
  const testConnection = async () => {
    try {
      const response = await fetch('https://www.google.com', {
        method: 'HEAD',
        timeout: 5000,
      });
      
      if (response.ok) {
        Alert.alert('Connection Test', 'Internet connection is working!');
      } else {
        Alert.alert('Connection Test', 'Internet connection failed!');
      }
    } catch (error) {
      Alert.alert('Connection Test', 'No internet connection available!');
    }
  };
  
  const showNetworkDetails = () => {
    if (networkDetails) {
      Alert.alert(
        'Network Details',
        `Type: ${connectionType}\n` +
        `Connected: ${isConnected}\n` +
        `Internet Reachable: ${isInternetReachable}\n` +
        `Details: ${JSON.stringify(networkDetails, null, 2)}`
      );
    }
  };
  
  return (
    <View style={styles.container}>
      <Text style={styles.title}>Network Status</Text>
      
      <View style={styles.statusContainer}>
        <View style={[styles.statusIndicator, { backgroundColor: getConnectionStatusColor() }]}>
          <Text style={styles.statusText}>{getConnectionStatusText()}</Text>
        </View>
        
        <Text style={styles.connectionType}>Connection Type: {connectionType}</Text>
        <Text style={styles.internetStatus}>
          Internet Reachable: {isInternetReachable ? 'Yes' : 'No'}
        </Text>
      </View>
      
      <View style={styles.buttonContainer}>
        <TouchableOpacity
          style={styles.button}
          onPress={testConnection}
        >
          <Text style={styles.buttonText}>Test Connection</Text>
        </TouchableOpacity>
        
        <TouchableOpacity
          style={styles.button}
          onPress={showNetworkDetails}
        >
          <Text style={styles.buttonText}>Show Details</Text>
        </TouchableOpacity>
      </View>
      
      <View style={styles.instructionsContainer}>
        <Text style={styles.instructionsTitle}>Instructions:</Text>
        <Text style={styles.instructionsText}>
          • Turn off WiFi and mobile data to test offline mode{'\n'}
          • Turn on airplane mode to test complete offline{'\n'}
          • Connect to WiFi without internet to test limited connectivity{'\n'}
          • Watch the status indicator change colors based on connection state
        </Text>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: '#f5f5f5',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 30,
    textAlign: 'center',
  },
  statusContainer: {
    backgroundColor: 'white',
    padding: 20,
    borderRadius: 10,
    marginBottom: 20,
    alignItems: 'center',
  },
  statusIndicator: {
    paddingHorizontal: 20,
    paddingVertical: 10,
    borderRadius: 20,
    marginBottom: 15,
  },
  statusText: {
    color: 'white',
    fontWeight: 'bold',
    fontSize: 16,
  },
  connectionType: {
    fontSize: 16,
    color: '#333',
    marginBottom: 5,
  },
  internetStatus: {
    fontSize: 16,
    color: '#333',
  },
  buttonContainer: {
    marginBottom: 20,
  },
  button: {
    backgroundColor: '#007AFF',
    padding: 15,
    borderRadius: 8,
    alignItems: 'center',
    marginBottom: 15,
  },
  buttonText: {
    color: 'white',
    fontWeight: 'bold',
    fontSize: 16,
  },
  instructionsContainer: {
    backgroundColor: '#E3F2FD',
    padding: 20,
    borderRadius: 10,
  },
  instructionsTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 10,
    color: '#1976D2',
  },
  instructionsText: {
    fontSize: 14,
    color: '#1976D2',
    lineHeight: 20,
  },
});

export default OfflineDetectionExample;
```
{% endraw %}

---

## 🧭 Navigation

<div class="navigation">
    <a href="./02-GraphQL-Integration.md" class="nav-link prev">⬅️ Previous: GraphQL Integration</a>
    <a href="./04-Storage-Solutions.md" class="nav-link next">Next: Storage Solutions ➡️</a>
</div>

---


*Last updated: December 2024*
