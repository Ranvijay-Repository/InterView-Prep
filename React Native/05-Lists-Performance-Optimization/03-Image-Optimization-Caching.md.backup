# 🖼️ **Image Optimization & Caching**

> **Master image optimization and caching strategies to improve performance and reduce memory usage in React Native applications**

<link rel="stylesheet" href="../../common-styles.css">

---

## 📚 **Table of Contents**

- [Introduction](#introduction)
- [Image Optimization Techniques](#image-optimization-techniques)
- [Caching Strategies](#caching-strategies)
- [Memory Management](#memory-management)
- [Performance Monitoring](#performance-monitoring)
- [Common Patterns](#common-patterns)
- [Interview Questions](#interview-questions)
- [Best Practices](#best-practices)

---

## 🎯 **Introduction**

Image optimization is crucial for React Native performance. Proper image handling, caching, and memory management can significantly improve app performance and user experience.

### **Image Optimization Overview**

{% raw %}
```
┌─────────────────────────────────────┐
│        Image Optimization           │
│  ┌─────────────────────────────────┐│
│  │        Optimization Techniques  ││
│  │  - Image resizing               ││
│  │  - Format selection             ││
│  │  - Compression                  ││
│  │  - Lazy loading                 ││
│  └─────────────────────────────────┘│
│  ┌─────────────────────────────────┐│
│  │        Caching Strategies       ││
│  │  - Memory cache                 ││
│  │  - Disk cache                   ││
│  │  - Network cache                ││
│  │  - Cache invalidation           ││
│  └─────────────────────────────────┘│
│  ┌─────────────────────────────────┐│
│  │        Memory Management        ││
│  │  - Image cleanup                ││
│  │  - Memory monitoring            ││
│  │  - Leak prevention              ││
│  │  - Performance optimization     ││
│  └─────────────────────────────────┘│
└─────────────────────────────────────┘
```
{% endraw %}

---

## 🖼️ **Image Optimization Techniques**

### **Optimized Image Component**

<button onclick="copyCode(this)" class="copy-btn">📋 Copy</button>
{% raw %}
```javascript
import React, { useState, useCallback, useRef } from 'react';
import { View, Text, Image, StyleSheet, TouchableOpacity, ActivityIndicator, Alert } from 'react-native';

const OptimizedImage = ({ 
  source, 
  style, 
  placeholder, 
  errorImage,
  onLoad,
  onError,
  resizeMode = 'cover',
  ...props 
}) => {
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(false);
  const [imageLoaded, setImageLoaded] = useState(false);
  
  const handleLoadStart = useCallback(() => {
    setLoading(true);
    setError(false);
  }, []);
  
  const handleLoadEnd = useCallback(() => {
    setLoading(false);
    setImageLoaded(true);
    onLoad?.();
  }, [onLoad]);
  
  const handleError = useCallback((error) => {
    setLoading(false);
    setError(true);
    onError?.(error);
  }, [onError]);
  
  return (
    <View style={[styles.container, style]}>
      {loading && (
        <View style={styles.loadingContainer}>
          {placeholder || <ActivityIndicator size="small" color="#007AFF" />}
        </View>
      )}
      
      {error && (
        <View style={styles.errorContainer}>
          {errorImage || (
            <View style={styles.defaultError}>
              <Text style={styles.errorText}>Failed to load</Text>
            </View>
          )}
        </View>
      )}
      
      <Image
        source={source}
        style={[styles.image, imageLoaded && styles.loadedImage]}
        resizeMode={resizeMode}
        onLoadStart={handleLoadStart}
        onLoadEnd={handleLoadEnd}
        onError={handleError}
        {...props}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    position: 'relative',
    overflow: 'hidden',
  },
  image: {
    width: '100%',
    height: '100%',
    opacity: 0,
  },
  loadedImage: {
    opacity: 1,
  },
  loadingContainer: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#f0f0f0',
  },
  errorContainer: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#f0f0f0',
  },
  defaultError: {
    padding: 20,
    alignItems: 'center',
  },
  errorText: {
    color: '#666',
    fontSize: 12,
  },
});

export default OptimizedImage;
```
{% endraw %}

### **Image Gallery with Optimization**

<button onclick="copyCode(this)" class="copy-btn">📋 Copy</button>
{% raw %}
```javascript
import React, { useState, useCallback, useMemo } from 'react';
import { View, Text, FlatList, StyleSheet, TouchableOpacity, Dimensions, Alert } from 'react-native';
import OptimizedImage from './OptimizedImage';

const { width: screenWidth } = Dimensions.get('window');
const ITEM_WIDTH = screenWidth / 2 - 20;

const ImageGallery = () => {
  const [images, setImages] = useState([]);
  const [selectedImage, setSelectedImage] = useState(null);
  const [loading, setLoading] = useState(false);
  
  // Generate sample images with different sizes and formats
  const generateImages = useCallback(() => {
    const imageList = [];
    const baseUrl = 'https://picsum.photos';
    
    for (let i = 0; i < 50; i++) {
      imageList.push({
        id: i,
        url: `${baseUrl}/${Math.floor(Math.random() * 800) + 200}/${Math.floor(Math.random() * 600) + 200}`,
        thumbnail: `${baseUrl}/100/100?random=${i}`,
        title: `Image ${i + 1}`,
        category: ['Nature', 'City', 'People', 'Abstract'][Math.floor(Math.random() * 4)],
        size: Math.floor(Math.random() * 1000000) + 100000, // Simulated file size
      });
    }
    
    return imageList;
  }, []);
  
  // Load images
  const loadImages = useCallback(async () => {
    setLoading(true);
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      const imageList = generateImages();
      setImages(imageList);
    } catch (error) {
      Alert.alert('Error', 'Failed to load images');
    } finally {
      setLoading(false);
    }
  }, [generateImages]);
  
  // Render image item
  const renderImageItem = useCallback(({ item }) => (
    <TouchableOpacity
      style={styles.imageItem}
      onPress={() => setSelectedImage(item)}
      activeOpacity={0.8}
    >
      <OptimizedImage
        source={{ uri: item.thumbnail }}
        style={styles.thumbnail}
        placeholder={
          <View style={styles.placeholder}>
            <Text style={styles.placeholderText}>Loading...</Text>
          </View>
        }
        errorImage={
          <View style={styles.errorPlaceholder}>
            <Text style={styles.errorText}>Error</Text>
          </View>
        }
      />
      <View style={styles.imageInfo}>
        <Text style={styles.imageTitle} numberOfLines={1}>
          {item.title}
        </Text>
        <Text style={styles.imageCategory}>{item.category}</Text>
        <Text style={styles.imageSize}>
          {(item.size / 1024).toFixed(1)} KB
        </Text>
      </View>
    </TouchableOpacity>
  ), []);
  
  // Memoized key extractor
  const keyExtractor = useCallback((item) => item.id.toString(), []);
  
  // Get item layout for better performance
  const getItemLayout = useCallback((data, index) => ({
    length: ITEM_WIDTH + 10,
    offset: (ITEM_WIDTH + 10) * index,
    index,
  }), []);
  
  // Clear images
  const clearImages = useCallback(() => {
    setImages([]);
    setSelectedImage(null);
  }, []);
  
  // Memoized performance info
  const performanceInfo = useMemo(() => (
    <View style={styles.performanceContainer}>
      <Text style={styles.performanceTitle}>Image Gallery Performance</Text>
      <Text style={styles.performanceText}>Images: {images.length}</Text>
      <Text style={styles.performanceText}>Memory Usage: {images.length * 0.5} MB (estimated)</Text>
    </View>
  ), [images.length]);
  
  React.useEffect(() => {
    loadImages();
  }, [loadImages]);
  
  return (
    <View style={styles.container}>
      <Text style={styles.title}>Optimized Image Gallery</Text>
      
      {performanceInfo}
      
      <View style={styles.controlsContainer}>
        <TouchableOpacity style={styles.controlButton} onPress={loadImages}>
          <Text style={styles.controlButtonText}>Load Images</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.controlButton} onPress={clearImages}>
          <Text style={styles.controlButtonText}>Clear</Text>
        </TouchableOpacity>
      </View>
      
      <FlatList
        data={images}
        renderItem={renderImageItem}
        keyExtractor={keyExtractor}
        numColumns={2}
        getItemLayout={getItemLayout}
        removeClippedSubviews={true}
        maxToRenderPerBatch={10}
        windowSize={10}
        initialNumToRender={10}
        style={styles.list}
        contentContainerStyle={styles.listContent}
      />
      
      {selectedImage && (
        <View style={styles.modalContainer}>
          <TouchableOpacity
            style={styles.modalBackground}
            onPress={() => setSelectedImage(null)}
          >
            <View style={styles.modalContent}>
              <OptimizedImage
                source={{ uri: selectedImage.url }}
                style={styles.fullImage}
                resizeMode="contain"
              />
              <Text style={styles.modalTitle}>{selectedImage.title}</Text>
              <Text style={styles.modalCategory}>{selectedImage.category}</Text>
            </View>
          </TouchableOpacity>
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    textAlign: 'center',
    padding: 20,
    backgroundColor: 'white',
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  performanceContainer: {
    backgroundColor: '#E3F2FD',
    padding: 15,
    margin: 10,
    borderRadius: 8,
  },
  performanceTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#1976D2',
    marginBottom: 5,
  },
  performanceText: {
    fontSize: 14,
    color: '#1976D2',
    marginBottom: 2,
  },
  controlsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    padding: 10,
    backgroundColor: 'white',
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  controlButton: {
    backgroundColor: '#007AFF',
    paddingHorizontal: 20,
    paddingVertical: 10,
    borderRadius: 6,
  },
  controlButtonText: {
    color: 'white',
    fontSize: 14,
    fontWeight: 'bold',
  },
  list: {
    flex: 1,
  },
  listContent: {
    padding: 10,
  },
  imageItem: {
    width: ITEM_WIDTH,
    margin: 5,
    backgroundColor: 'white',
    borderRadius: 10,
    overflow: 'hidden',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  thumbnail: {
    width: '100%',
    height: ITEM_WIDTH,
  },
  placeholder: {
    width: '100%',
    height: ITEM_WIDTH,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#f0f0f0',
  },
  placeholderText: {
    color: '#666',
    fontSize: 12,
  },
  errorPlaceholder: {
    width: '100%',
    height: ITEM_WIDTH,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#ffebee',
  },
  errorText: {
    color: '#c62828',
    fontSize: 12,
  },
  imageInfo: {
    padding: 10,
  },
  imageTitle: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 4,
  },
  imageCategory: {
    fontSize: 12,
    color: '#007AFF',
    marginBottom: 2,
  },
  imageSize: {
    fontSize: 10,
    color: '#666',
  },
  modalContainer: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0,0,0,0.9)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalBackground: {
    flex: 1,
    width: '100%',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContent: {
    width: '90%',
    alignItems: 'center',
  },
  fullImage: {
    width: '100%',
    height: 300,
    marginBottom: 20,
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: 'white',
    marginBottom: 10,
  },
  modalCategory: {
    fontSize: 16,
    color: '#ccc',
  },
});

export default ImageGallery;
```
{% endraw %}

---

## 🧭 Navigation

<div class="navigation">
    <a href="./02-Virtualization-Optimization.md" class="nav-link prev">⬅️ Previous: Virtualization & Optimization</a>
    <a href="./04-Performance-Profiling.md" class="nav-link next">Next: Performance Profiling ➡️</a>
</div>

---


*Last updated: December 2024*
