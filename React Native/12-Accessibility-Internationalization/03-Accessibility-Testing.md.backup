# 🧪 **Accessibility Testing**

> **Master accessibility testing strategies, tools, and validation for React Native applications**

<link rel="stylesheet" href="../../common-styles.css">

---

## 📚 **Table of Contents**

- [Accessibility Testing Overview](#-accessibility-testing-overview)
- [Testing Tools](#-testing-tools)
- [Automated Testing](#-automated-testing)
- [Manual Testing](#-manual-testing)
- [Testing Best Practices](#-testing-best-practices)
- [Interview Questions](#-interview-questions)

---

## 🏗️ **Accessibility Testing Overview**

### **Testing Strategy**

{% raw %}
```mermaid
graph TD
    A[Accessibility Testing] --> B[Automated Testing]
    A --> C[Manual Testing]
    A --> D[User Testing]
    
    B --> E[Lint Rules]
    B --> F[Unit Tests]
    C --> G[Screen Reader Testing]
    C --> H[Keyboard Navigation]
    D --> I[Real User Feedback]
```
{% endraw %}

### **Testing Levels**
- **Automated**: Lint rules, unit tests, integration tests
- **Manual**: Screen reader testing, keyboard navigation
- **User Testing**: Real users with disabilities

---

## 🔧 **Testing Tools**

### **Accessibility Testing Utilities**

<button onclick="copyCode(this)" class="copy-btn">📋 Copy</button>
{% raw %}
```javascript
import React from 'react';
import { View, Text, TouchableOpacity, StyleSheet } from 'react-native';

const AccessibilityTestSuite = () => {
  const runAccessibilityTests = () => {
    const tests = [
      {
        name: 'Button Accessibility',
        test: testButtonAccessibility,
        description: 'Tests if buttons have proper accessibility props'
      },
      {
        name: 'Text Accessibility',
        test: testTextAccessibility,
        description: 'Tests if text elements are accessible'
      },
      {
        name: 'Focus Management',
        test: testFocusManagement,
        description: 'Tests focus order and management'
      }
    ];

    return tests;
  };

  const testButtonAccessibility = (element) => {
    const issues = [];
    
    if (!element.props.accessible) {
      issues.push('Button missing accessible prop');
    }
    
    if (!element.props.accessibilityRole) {
      issues.push('Button missing accessibilityRole');
    }
    
    if (!element.props.accessibilityLabel) {
      issues.push('Button missing accessibilityLabel');
    }
    
    return {
      passed: issues.length === 0,
      issues
    };
  };

  const testTextAccessibility = (element) => {
    const issues = [];
    
    if (element.props.accessible === false) {
      issues.push('Text element explicitly marked as not accessible');
    }
    
    return {
      passed: issues.length === 0,
      issues
    };
  };

  const testFocusManagement = () => {
    // Test focus order and management
    return {
      passed: true,
      issues: []
    };
  };

  return {
    runAccessibilityTests,
    testButtonAccessibility,
    testTextAccessibility,
    testFocusManagement
  };
};

export default AccessibilityTestSuite;
```
{% endraw %}

---

## 🤖 **Automated Testing**

### **Accessibility Lint Rules**

<button onclick="copyCode(this)" class="copy-btn">📋 Copy</button>
{% raw %}
```javascript
// ESLint accessibility rules
const accessibilityLintConfig = {
  rules: {
    'jsx-a11y/alt-text': 'error',
    'jsx-a11y/anchor-has-content': 'error',
    'jsx-a11y/aria-props': 'error',
    'jsx-a11y/aria-proptypes': 'error',
    'jsx-a11y/aria-unsupported-elements': 'error',
    'jsx-a11y/click-events-have-key-events': 'error',
    'jsx-a11y/heading-has-content': 'error',
    'jsx-a11y/html-has-lang': 'error',
    'jsx-a11y/img-redundant-alt': 'error',
    'jsx-a11y/no-access-key': 'error',
    'jsx-a11y/no-redundant-roles': 'error',
    'jsx-a11y/role-has-required-aria-props': 'error',
    'jsx-a11y/role-supports-aria-props': 'error',
    'jsx-a11y/scope': 'error',
    'jsx-a11y/tabindex-no-positive': 'error'
  }
};

// Jest accessibility matchers
const accessibilityMatchers = {
  toBeAccessible: (received) => {
    const pass = received.props.accessible !== false;
    return {
      pass,
      message: () => `Expected element to be accessible`
    };
  },
  
  toHaveAccessibilityRole: (received, role) => {
    const pass = received.props.accessibilityRole === role;
    return {
      pass,
      message: () => `Expected element to have accessibility role ${role}`
    };
  },
  
  toHaveAccessibilityLabel: (received, label) => {
    const pass = received.props.accessibilityLabel === label;
    return {
      pass,
      message: () => `Expected element to have accessibility label ${label}`
    };
  }
};

export { accessibilityLintConfig, accessibilityMatchers };
```
{% endraw %}

---

## 👥 **Manual Testing**

### **Screen Reader Testing Guide**

<button onclick="copyCode(this)" class="copy-btn">📋 Copy</button>
{% raw %}
```javascript
import React from 'react';
import { View, Text, StyleSheet } from 'react-native';

const ScreenReaderTestingGuide = () => {
  const testingChecklist = [
    {
      category: 'Navigation',
      items: [
        'Can navigate through all interactive elements',
        'Focus order is logical and intuitive',
        'Can skip to main content',
        'Can navigate back and forward'
      ]
    },
    {
      category: 'Content',
      items: [
        'All text is readable by screen reader',
        'Images have descriptive alt text',
        'Form labels are properly associated',
        'Error messages are announced'
      ]
    },
    {
      category: 'Interactions',
      items: [
        'Buttons have descriptive labels',
        'Links have meaningful text',
        'Form controls are properly labeled',
        'Actions are clearly described'
      ]
    }
  ];

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Screen Reader Testing Checklist</Text>
      {testingChecklist.map((category, index) => (
        <View key={index} style={styles.category}>
          <Text style={styles.categoryTitle}>{category.category}</Text>
          {category.items.map((item, itemIndex) => (
            <Text key={itemIndex} style={styles.checklistItem}>
              • {item}
            </Text>
          ))}
        </View>
      ))}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: '#fff',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
    color: '#333',
  },
  category: {
    marginBottom: 20,
  },
  categoryTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 10,
    color: '#333',
  },
  checklistItem: {
    fontSize: 16,
    marginBottom: 5,
    color: '#666',
  },
});

export default ScreenReaderTestingGuide;
```
{% endraw %}

---

## 🎯 **Testing Best Practices**

### **1. Automated Testing**
- Use ESLint accessibility rules
- Write unit tests for accessibility
- Test with different screen readers
- Validate focus management

### **2. Manual Testing**
- Test with real screen readers
- Verify keyboard navigation
- Check color contrast
- Test with different users

### **3. Continuous Testing**
- Integrate into CI/CD pipeline
- Regular accessibility audits
- User feedback collection
- Performance monitoring

---

## ❓ **Interview Questions**

### **Basic Questions**
1. **How do you test accessibility in React Native?**
2. **What tools do you use for accessibility testing?**
3. **How do you validate screen reader support?**

### **Advanced Questions**
1. **How would you implement automated accessibility testing?**
2. **Explain the process of manual accessibility testing.**
3. **How do you handle accessibility testing in CI/CD?**

### **Practical Questions**
1. **Set up accessibility linting rules.**
2. **Create accessibility test cases.**
3. **Implement accessibility testing in your app.**

---

## 🧭 Navigation

<div class="navigation">
    <a href="./02-Internationalization.md" class="nav-link prev">⬅️ Previous: Internationalization</a>
    <a href="./04-Accessibility-Best-Practices.md" class="nav-link next">Next: Accessibility Best Practices ➡️</a>
</div>

---

<script src="../../common-scripts.js"></script>

*Last updated: December 2024*
